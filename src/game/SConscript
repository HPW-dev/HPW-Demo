#!/usr/bin/env python
from script.helper import *
Import(['env'])

hpw_config = env['hpw_config']
assert hpw_config

lib_path = []
inc_path = []
used_libs = []
host_sources = []
sources = []
prog_name = "HPW"
build_dir = "../../build/"
src_dir = "../../src/"
thirdparty_dir = "../../thirdparty/"

def accept_config():
  global env
  global inc_path
  global lib_path
  global used_libs
  global host_sources
  global hpw_config

  inc_path.extend([
    ".",
    src_dir,
    thirdparty_dir + "include/",
  ])
  used_libs.extend(["yaml-cpp"])

  match hpw_config.system:
    case System.windows:
      inc_path.extend([thirdparty_dir + "include/_windows_only"])
      used_libs.extend(["OpenAL32.dll"])
      lib_path.extend([
        thirdparty_dir + "lib/yaml-cpp/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
        thirdparty_dir + "lib/OpenAL-soft/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
      ])
    case System.linux:
      used_libs.extend(["openal"])
    case _: raise ValueError 
  
  match hpw_config.host:
    case Host.glfw3:
      host_sources.extend([
        Glob(src_dir + "host/glfw3/*.cpp"),
        Glob(src_dir + "host/ogl3/*.cpp"),
      ])
      match hpw_config.system:
        case System.linux: used_libs.extend(["GL", "GLEW", "glfw"])
        case System.windows:
          inc_path.extend([thirdparty_dir + "include/_windows_only/GLEW"])
          used_libs.extend(["glfw3dll", "glew32", "opengl32"])
          lib_path.extend([
            thirdparty_dir + "lib/GLEW/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
            thirdparty_dir + "lib/GLFW/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
          ])
        case _: ValueError
    case Host.asci:
      host_sources.extend([Glob(src_dir + "host/asci/*.cpp")])
    case Host.sdl2: raise ValueError("SDL2 host not implemented")
    case _: raise ValueError(f"unknown host name \"{hpw_config.host}\"")

  match hpw_config.compiler:
    case Compiler.gcc: env['CXX'] = 'g++'
    case Compiler.clang: env['CXX'] = 'clang++'
    case _: raise ValueError

def init_sources():
  global sources

  sources.extend([
    Glob(thirdparty_dir + "include/zip/*.c"),
    thirdparty_dir + "include/stb/stb_vorbis.c",
    Glob(src_dir + "util/*.cpp"),
    Glob(src_dir + "util/file/*.cpp"),
    Glob(src_dir + "util/math/*.cpp"),
    Glob(src_dir + "util/math/*.c"),
    Glob(src_dir + "host/*.cpp"),
    Glob(src_dir + "host/windows/*.cpp"),
    Glob(src_dir + "game/*.cpp"),
    Glob(src_dir + "game/util/*.cpp"),
    Glob(src_dir + "game/util/post-effect/*.cpp"),
    Glob(src_dir + "game/util/cmd/*.cpp"),
    Glob(src_dir + "game/core/*.cpp"),
    Glob(src_dir + "game/hud/*.cpp"),
    Glob(src_dir + "game/entity/*.cpp"),
    Glob(src_dir + "game/entity/player/ability/*.cpp"),
    Glob(src_dir + "game/entity/player/*.cpp"),
    Glob(src_dir + "game/entity/enemy/*.cpp"),
    Glob(src_dir + "game/entity/collider/*.cpp"),
    Glob(src_dir + "game/entity/util/info/*.cpp"),
    Glob(src_dir + "game/entity/util/*.cpp"),
    Glob(src_dir + "game/menu/*.cpp"),
    Glob(src_dir + "game/menu/item/*.cpp"),
    Glob(src_dir + "game/scene/*.cpp"),
    Glob(src_dir + "game/scene/cutscene/*.cpp"),
    Glob(src_dir + "game/scene/msgbox/*.cpp"),
    Glob(src_dir + "game/level/*.cpp"),
    Glob(src_dir + "game/level/util/*.cpp"),
    Glob(src_dir + "game/netplay/scene/*.cpp"),
    Glob(src_dir + "plugin/epge/*.cpp"),
    Glob(src_dir + "graphic/animation/*.cpp"),
    Glob(src_dir + "graphic/image/*.cpp"),
    Glob(src_dir + "graphic/sprite/*.cpp"),
    Glob(src_dir + "graphic/effect/*.cpp"),
    Glob(src_dir + "graphic/font/*.cpp"),
    Glob(src_dir + "graphic/util/*.cpp"),
    Glob(src_dir + "sound/*.cpp"),
  ])
  sources.extend([host_sources]);

def build():
  env.Program(
    target = build_dir + "bin/" + prog_name,
    source = sources,
    LIBPATH = lib_path,
    LIBS = used_libs,
    CPPDEFINES = hpw_config.cxx_defines,
    CXXFLAGS = hpw_config.cxx_flags,
    LINKFLAGS = hpw_config.cxx_ldflags,
    CPPPATH = inc_path,
  )

# main section:
accept_config()
init_sources()
build()
save_version(build_dir, used_libs, hpw_config, env['CXX'], env['CC'])
