#!/usr/bin/env python
Import([
  "env",
  "is_linux",
  "is_debug",
  "ld_flags",
  "cpp_flags",
  "compiler",
  "defines",
  "is_64bit",
  "host",
])

enable_omp = True
#enable_omp = False
if enable_omp:
  ld_flags.extend(["-fopenmp"])
  cpp_flags.extend(["-fopenmp"])
  
lib_path = []
prog_name = "HPW"
build_dir = "../../build/"
src_dir = "../../src/"
thirdparty_dir = "../../thirdparty/"

inc_path = [
  ".",
  src_dir,
  thirdparty_dir + "include/",
]

used_libs = [
  "yaml-cpp"
]

if is_linux:
  used_libs.extend(["openal"])
else: # windows
  inc_path.extend([
    thirdparty_dir + "include/_windows_only",
  ])
  used_libs.extend(["OpenAL32.dll"])
  lib_path.extend([
    thirdparty_dir + "lib/yaml-cpp/",
    thirdparty_dir + "lib/OpenAL-soft/" + ("x64" if is_64bit else "x32"),
  ])

host_sources = []
match host:
  case "glfw3":
    defines.append("-DHOST_GLFW3")
    host_sources = [
      Glob(src_dir + "host/glfw3/*.cpp"),
      Glob(src_dir + "host/ogl3/*.cpp"),
    ]
    if is_linux:
      used_libs.extend(["GL", "GLEW", "glfw"])
    else:
      inc_path.extend([
        thirdparty_dir + "include/_windows_only/GLEW"
      ])
      used_libs.extend(["glfw3dll", "glew32", "opengl32"])
      lib_path.extend([
        thirdparty_dir + "lib/GLEW/" + ("x64" if is_64bit else "x32"),
        thirdparty_dir + "lib/GLFW/" + ("x64" if is_64bit else "x32"),
      ])

  case "asci":
    defines.append("-DHOST_ASCI")
    host_sources = [
      Glob(src_dir + "host/asci/*.cpp"),
    ]

  case "sdl2":
    defines.append("-DHOST_SDL2")
    raise ValueError("SDL2 host not implemented")
  
  case _:
    raise ValueError(f"unknown host name \"{host}\"")

sources = [
  Glob(thirdparty_dir + "include/zip/*.c"),
  thirdparty_dir + "include/stb/stb_vorbis.c",
  Glob(src_dir + "util/*.cpp"),
  Glob(src_dir + "util/file/*.cpp"),
  Glob(src_dir + "util/math/*.cpp"),
  Glob(src_dir + "util/math/*.c"),
  Glob(src_dir + "host/*.cpp"),
  Glob(src_dir + "host/windows/*.cpp"),
  Glob(src_dir + "game/*.cpp"),
  Glob(src_dir + "game/util/*.cpp"),
  Glob(src_dir + "game/util/post-effect/*.cpp"),
  Glob(src_dir + "game/util/cmd/*.cpp"),
  Glob(src_dir + "game/util/embeded-pgr/*.cpp"),
  Glob(src_dir + "game/core/*.cpp"),
  Glob(src_dir + "game/hud/*.cpp"),
  Glob(src_dir + "game/entity/*.cpp"),
  Glob(src_dir + "game/entity/player/ability/*.cpp"),
  Glob(src_dir + "game/entity/player/*.cpp"),
  Glob(src_dir + "game/entity/enemy/*.cpp"),
  Glob(src_dir + "game/entity/collider/*.cpp"),
  Glob(src_dir + "game/entity/util/info/*.cpp"),
  Glob(src_dir + "game/entity/util/*.cpp"),
  Glob(src_dir + "game/menu/*.cpp"),
  Glob(src_dir + "game/menu/item/*.cpp"),
  Glob(src_dir + "game/scene/*.cpp"),
  Glob(src_dir + "game/scene/cutscene/*.cpp"),
  Glob(src_dir + "game/scene/msgbox/*.cpp"),
  Glob(src_dir + "game/level/*.cpp"),
  Glob(src_dir + "game/level/util/*.cpp"),
  Glob(src_dir + "graphic/animation/*.cpp"),
  Glob(src_dir + "graphic/image/*.cpp"),
  Glob(src_dir + "graphic/sprite/*.cpp"),
  Glob(src_dir + "graphic/effect/*.cpp"),
  Glob(src_dir + "graphic/font/*.cpp"),
  Glob(src_dir + "graphic/util/*.cpp"),
  Glob(src_dir + "sound/*.cpp"),
]
sources.extend([host_sources]);

if not is_debug:
  if not is_linux:
    if host != "asci":
      ld_flags.append("-mwindows")

# билд игры
env.Program(
  target = build_dir + "bin/" + prog_name,
  source = sources,
  LIBPATH = lib_path,
  LIBS = used_libs,
  CXX = compiler,
  CPPDEFINES = defines,
  CXXFLAGS = cpp_flags,
  LINKFLAGS = ld_flags,
  CPPPATH = inc_path,
)
