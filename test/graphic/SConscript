#!/usr/bin/env python
Import([
  "env",
  "is_linux",
  "is_debug",
  "ld_flags",
  "cpp_flags",
  "compiler",
  "defines",
  "is_64bit",
])

ld_flags.extend(["-fopenmp"])
cpp_flags.extend(["-fopenmp"])
lib_path = []
build_dir = "../../build/"
prog_name = "HPW"
src_dir = "../../src/"
thirdparty_dir = "../../thirdparty/"

inc_path = [
  ".",
  src_dir,
  thirdparty_dir + "include/",
]

used_libs = [
  "yaml-cpp",
  #"mcfgthread.dll", # for clang
]

if is_linux:
  used_libs.extend(["GL", "GLEW", "glfw"])
else: # windows
  inc_path.extend([
    thirdparty_dir + "include/_windows_only",
    thirdparty_dir + "include/_windows_only/GLEW"
  ])
  used_libs.extend(["glfw3dll", "glew32", "opengl32"])
  lib_path.extend([
    thirdparty_dir + "lib/GLEW/" + ("x64" if is_64bit else "x32"),
    thirdparty_dir + "lib/GLFW/" + ("x64" if is_64bit else "x32"),
    thirdparty_dir + "lib/yaml-cpp/"
  ])

sources = [
  src_dir + "graphic/image/color-table.cpp",
  src_dir + "graphic/image/color.cpp",
  src_dir + "graphic/image/color-blend.cpp",
  src_dir + "graphic/image/image.cpp",
  src_dir + "graphic/image/image-io.cpp",
  src_dir + "graphic/image/palette.cpp",
  src_dir + "graphic/font/unifont.cpp",
  src_dir + "graphic/font/font.cpp",
  src_dir + "graphic/util/convert.cpp",
  src_dir + "graphic/util/rotation.cpp",
  src_dir + "graphic/util/graphic-util.cpp",
  src_dir + "graphic/sprite/sprite.cpp",

  src_dir + "game/util/keybits.cpp",
  src_dir + "game/util/game-archive.cpp",
  src_dir + "game/util/config.cpp",
  src_dir + "game/util/logo.cpp",
  src_dir + "game/util/sync.cpp",

  src_dir + "host/protownd.cpp",
  src_dir + "host/resize.cpp",
  src_dir + "host/host.cpp",
  src_dir + "host/host-util.cpp",
  src_dir + "host/ogl3/host-ogl.cpp",
  src_dir + "host/glfw3/host-glfw.cpp",
  src_dir + "host/glfw3/host-glfw-keymap.cpp",
  src_dir + "host/windows/windows-keycodes.cpp",

  src_dir + "util/platform.cpp",
  src_dir + "util/file/archive.cpp",
  src_dir + "util/file/file.cpp",
  src_dir + "util/file/yaml.cpp",
  src_dir + "util/str-util.cpp",
  src_dir + "util/error.cpp",
  src_dir + "util/path.cpp",
  src_dir + "util/math/mat.cpp",
  src_dir + "util/math/vec-util.cpp",
  src_dir + "util/math/random.cpp",
  src_dir + "util/math/timer.cpp",

  Glob(thirdparty_dir + "include/zip/*.c"),
  Glob("*.cpp"), # <-- graphic test main
]  

if not is_debug and not is_linux:
  ld_flags.append("-mwindows")

# билд теста графики
env.Append(CPPDEFINES = defines)
env.Append(CXXFLAGS = cpp_flags)
env.Program(
  target = build_dir + prog_name,
  source = sources,
  CXX = compiler,
  CXXFLAGS = cpp_flags,
  LIBPATH = lib_path,
  CPPPATH = inc_path,
  LINKFLAGS = ld_flags,
  LIBS = used_libs
) # env.Program
