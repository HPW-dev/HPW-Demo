#!/usr/bin/env python
from script.helper import *
Import(['env'])

hpw_config = env['hpw_config']
assert hpw_config

lib_path = []
inc_path = []
used_libs = []
host_sources = []
sources = []
prog_name = 'connection-test'
build_dir = '../../build/'
src_dir = '../../src/'
thirdparty_dir = '../../thirdparty/'

def accept_config():
  global env
  global inc_path
  global lib_path
  global used_libs
  global host_sources
  global hpw_config

  inc_path.extend([
    '.',
    src_dir,
    thirdparty_dir + 'include/',
  ])

  match hpw_config.system:
    case System.linux: pass
    case System.windows:
      inc_path.extend([thirdparty_dir + "include/_windows_only"])
      lib_path.extend([
        thirdparty_dir + "lib/yaml-cpp/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
      ])
    case _: raise ValueError 
  
  match hpw_config.host:
    case Host.glfw3:
      host_sources.extend([
        Glob(src_dir + "host/glfw3/*.cpp"),
        Glob(src_dir + "host/ogl3/*.cpp"),
      ])
      match hpw_config.system:
        case System.linux: used_libs.extend(["GL", "GLEW", "glfw"])
        case System.windows:
          inc_path.extend([thirdparty_dir + "include/_windows_only/GLEW"])
          used_libs.extend(["glfw3dll", "glew32", "opengl32"])
          lib_path.extend([
            thirdparty_dir + "lib/GLEW/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
            thirdparty_dir + "lib/GLFW/" + ("x64" if hpw_config.bitness == Bitness.x64 else "x32"),
          ])
        case _: ValueError
    case _: raise ValueError(f"unknown host name \"{hpw_config.host}\"")

  match hpw_config.compiler:
    case Compiler.gcc: env['CXX'] = 'g++'
    case Compiler.clang: env['CXX'] = 'clang++'
    case _: raise ValueError
  
  used_libs.extend(["yaml-cpp"])
  hpw_config.cxx_defines.extend([
    "-DASIO_STANDALONE",
    "-DDISABLE_REPLAY", "-DDISABLE_SOUND", "-DDISABLE_CONFIG",
  ])

  # зависимости ASIO для винды
  if hpw_config.system == System.windows:
    used_libs.extend([
      "ws2_32",
      "mswsock",
    ])
    hpw_config.cxx_defines.extend(["-D_WIN32_WINNT=0x0601"])

def init_sources():
  global sources

  sources.extend([
    Glob(thirdparty_dir + "include/zip/*.c"),

    src_dir + "graphic/effect/blur.cpp",
    src_dir + "graphic/image/color-table.cpp",
    src_dir + "graphic/image/color.cpp",
    src_dir + "graphic/image/color-blend.cpp",
    src_dir + "graphic/image/image.cpp",
    src_dir + "graphic/image/image-io.cpp",
    src_dir + "graphic/image/palette.cpp",
    Glob(src_dir + "graphic/font/*.cpp"),
    src_dir + "graphic/util/convert.cpp",
    src_dir + "graphic/util/rotation.cpp",
    src_dir + "graphic/util/graphic-util.cpp",
    src_dir + "graphic/sprite/sprite.cpp",
    src_dir + "graphic/sprite/sprite-io.cpp",

    src_dir + "game/menu/menu.cpp",
    src_dir + "game/menu/text-menu.cpp",
    src_dir + "game/menu/item/text-item.cpp",
    src_dir + "game/menu/item/item.cpp",

    src_dir + "game/scene/scene-mgr.cpp",
    src_dir + "game/scene/scene.cpp",
    src_dir + "game/scene/scene-enter-text.cpp",
    src_dir + "game/scene/msgbox/msgbox-enter.cpp",

    src_dir + "game/util/keybits.cpp",
    src_dir + "game/util/game-archive.cpp",
    src_dir + "game/util/locale.cpp",
    src_dir + "game/util/logo.cpp",
    src_dir + "game/util/sync.cpp",
    src_dir + "game/util/version.cpp",
    src_dir + "game/util/task.cpp",
    src_dir + "game/util/screenshot.cpp",
    src_dir + "game/util/font-helper.cpp",
    src_dir + "game/util/resource-helper.cpp",
    src_dir + "game/util/blur-helper.cpp",

    src_dir + "host/host-resize.cpp",
    src_dir + "host/host.cpp",
    src_dir + "host/host-util.cpp",
    src_dir + "host/windows/windows-keycodes.cpp",

    src_dir + "util/platform.cpp",
    src_dir + "util/file/archive.cpp",
    src_dir + "util/file/file.cpp",
    src_dir + "util/file/file-io.cpp",
    src_dir + "util/file/yaml.cpp",
    src_dir + "util/str-util.cpp",
    src_dir + "util/hpw-util.cpp",
    src_dir + "util/pparser.cpp",
    src_dir + "util/error.cpp",
    src_dir + "util/unicode.cpp",
    src_dir + "util/log.cpp",
    src_dir + "util/path.cpp",
    src_dir + "util/math/mat.cpp",
    src_dir + "util/math/vec-util.cpp",
    src_dir + "util/math/random.cpp",
    src_dir + "util/math/timer.cpp",

    src_dir + 'util/net/udp-packet-mgr.cpp',
  
    Glob('packet/*.cpp'),
    Glob('*.cpp'),
  ])
  sources.extend([host_sources]);

def build():
  env.Program(
    target = build_dir + 'bin/' + prog_name,
    source = sources,
    LIBPATH = lib_path,
    LIBS = used_libs,
    CPPDEFINES = hpw_config.cxx_defines,
    CXXFLAGS = hpw_config.cxx_flags,
    LINKFLAGS = hpw_config.cxx_ldflags,
    CPPPATH = inc_path,
  )

# main section:
accept_config()
init_sources()
build()
